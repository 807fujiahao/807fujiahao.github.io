<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blog</title>
  <subtitle>我的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://807fujiahao.github.io/"/>
  <updated>2017-07-18T06:16:34.287Z</updated>
  <id>https://807fujiahao.github.io/</id>
  
  <author>
    <name>逍遥</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Zagzig Level Order Traversal</title>
    <link href="https://807fujiahao.github.io/2017/07/18/Zagzig-Level-Order-Traversal/"/>
    <id>https://807fujiahao.github.io/2017/07/18/Zagzig-Level-Order-Traversal/</id>
    <published>2017-07-18T06:05:00.000Z</published>
    <updated>2017-07-18T06:16:34.287Z</updated>
    
    <content type="html"><![CDATA[<p>题目描述</p>
<p>given a binary tree, return the zigzag level order traversal of its nodes’ values. (ie, from left to right, then right to left for the next level and alternate between).<br>     For example:<br>     Given binary tree [3,9,20,null,null,15,7],<br>              3<br>             / \<br>             9  20<br>               /  \<br>              15   7<br>     return its zigzag level order traversal as:<br>             [<br>             [3],<br>             [20,9],<br>             [15,7]<br>             ]<br>和二叉树的层序遍历类似同样可以利用两种不同的方法：广度优先和深度优先</p>
<p>广度优先</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; zigzagLevelOrder(TreeNode root) &#123;</div><div class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</div><div class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">    queue.offer(root);</div><div class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">while</span> (!queue.isEmpty())&#123;</div><div class="line">        <span class="keyword">int</span> levelNum = queue.size();</div><div class="line">        List&lt;Integer&gt; level = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; levelNum; i++) &#123;</div><div class="line">            TreeNode node = queue.poll();</div><div class="line">            <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) queue.offer(node.left);</div><div class="line">            <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) queue.offer(node.right);</div><div class="line">            level.add(node.val);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!flag)&#123;</div><div class="line">            <span class="keyword">int</span> l = <span class="number">0</span>, r = levelNum-<span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span> (l &lt; r)&#123;</div><div class="line">                <span class="keyword">int</span> tmp = level.get(l);</div><div class="line">                level.set(l,level.get(r));</div><div class="line">                level.set(r,tmp);</div><div class="line">                l++;r--;</div><div class="line">            &#125;</div><div class="line">            flag = <span class="keyword">true</span>;</div><div class="line">        &#125;<span class="keyword">else</span> flag = <span class="keyword">false</span>;</div><div class="line">        res.add(level);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>广度优先：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; zigzagOrder(TreeNode root)&#123;  </div><div class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</div><div class="line">    dfsHelper(res,root,<span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfsHelper</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, TreeNode node, <span class="keyword">int</span> level)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="comment">//刚开始遍历到这一层的时候</span></div><div class="line">    <span class="keyword">if</span> (level == res.size())</div><div class="line">      	<span class="comment">//注意不要创建ArrayList 否在当层数是奇数的时候需要在</span></div><div class="line">        <span class="comment">// list的第一个位置插入元素如果创建ArrayList将消耗O（n）的时间</span></div><div class="line">        res.add(<span class="keyword">new</span> LinkedList&lt;&gt;());</div><div class="line"></div><div class="line">    <span class="comment">//层数是偶数的时候按照从左到右</span></div><div class="line">    <span class="keyword">if</span> ((level &amp; <span class="number">1</span>) == <span class="number">0</span>)</div><div class="line">        res.get(level).add(node.val);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        res.get(level).add(<span class="number">0</span>,node.val);</div><div class="line">    dfsHelper(res,node.left,level+<span class="number">1</span>);</div><div class="line">    dfsHelper(res,node.right,level+<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目描述&lt;/p&gt;
&lt;p&gt;given a binary tree, return the zigzag level order traversal of its nodes’ values. (ie, from left to right, then right to lef
    
    </summary>
    
      <category term="leetcode" scheme="https://807fujiahao.github.io/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Binary Tree Level Order Traversal</title>
    <link href="https://807fujiahao.github.io/2017/07/18/inary-Tree-Level-Order-Traversal/"/>
    <id>https://807fujiahao.github.io/2017/07/18/inary-Tree-Level-Order-Traversal/</id>
    <published>2017-07-18T05:59:00.000Z</published>
    <updated>2017-07-18T06:01:04.831Z</updated>
    
    <content type="html"><![CDATA[<p>题目描述：</p>
<p>Given a binary tree, return the level order traversal of its nodes’ values. (ie, from left to right, level by level).For example:Given binary tree [3,9,20,null,null,15,7],     </p>
<pre><code> 3   
 / \    
9  20   
   /  \    
  15   7
</code></pre><p>return its level order traversal as:    [    [3],    [9,20],    [15,7]    ]</p>
<p>解题思路：利用广度优先搜索的思想，先遍历当前节点的临近节点，之后在遍历下一层的节点。</p>
<pre><code>public class LevelOrderTraversal {

    public static List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) {
        List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();
        if (root == null) return res;
        LinkedList&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;();
        queue.offer(root);
        while (!queue.isEmpty()){
            int levelNum = queue.size();    //每一层的节点的数目
            List&lt;Integer&gt; level = new ArrayList&lt;&gt;();
            for (int i = 0; i &lt; levelNum; i++) {
                TreeNode node = queue.poll();
                if (node.left != null) queue.offer(node.left);
                if (node.right != null) queue.offer(node.right);
                level.add(node.val);
            }
            res.add(level);
        }
        return res;
    }

}
</code></pre><p>leetcode上的大神们提供了与深度优先算法完全不一样的，广度优先算法</p>
<pre><code>public List&lt;List&lt;Integer&gt;&gt; level(TreeNode root){
        List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();
        if (root == null) return res;
        dfsHelper(res,root,0);
        return res;
}

private void dfsHelper(List&lt;List&lt;Integer&gt;&gt; res, TreeNode node, int level) {
    if (node == null) return;
    //刚开始的递归到该层的时候创建一个 List 否则会报空指针异常
    if (level &gt;= res.size())
        res.add(new ArrayList&lt;&gt;());
    res.get(level).add(node.val);
    dfsHelper(res,node.left,level+1);
    dfsHelper(res,node.right,level+1);
}
</code></pre><p>广度优先算法和二叉树的先序遍历思想一致。首先我们遍历一个节点的左子树（刚开始遍历到该层的时候需要创建一个List），然后将元素加入到对应层号的list中去，当我们左子树遍历完之后就遍历右子树，当前节点遍历完成之后才遍历下一个节点。因为遍历的顺序是先左子树后右子树，所以最后得到的节点是从左到右的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目描述：&lt;/p&gt;
&lt;p&gt;Given a binary tree, return the level order traversal of its nodes’ values. (ie, from left to right, level by level).For exa
    
    </summary>
    
      <category term="leetcode" scheme="https://807fujiahao.github.io/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Same Tree</title>
    <link href="https://807fujiahao.github.io/2017/07/17/%E6%AC%A2%E5%92%8C%E4%BD%A0%E6%90%9E%E5%9F%BA%E5%90%97%E5%B0%8F%E9%B8%A1%E9%B8%A1/"/>
    <id>https://807fujiahao.github.io/2017/07/17/欢和你搞基吗小鸡鸡/</id>
    <published>2017-07-17T14:06:00.000Z</published>
    <updated>2017-07-17T15:09:10.054Z</updated>
    
    <content type="html"><![CDATA[<p>题目描述：</p>
<blockquote>
<p>Given two binary trees, write a function to check if they are equal or not.<br>Two binary trees are considered equal if they are structurally identical and the nodes have the same value.</p>
</blockquote>
<p>解题思路：和二叉树先序遍历的思想一致，首先对于两棵树上的节点来说，先判断他们当前对应的节点的值是否相等，然后在去一直向下判断左子树节点是否一致，左子树判断无误之后，判断右子树对应的节点的值是否一致。</p>
<p>下面是java的代码实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class SameTree &#123;</div><div class="line"></div><div class="line">    public boolean isSameTree(TreeNode p, TreeNode q) &#123;</div><div class="line">        if (p == null &amp;&amp; q == null) return true;</div><div class="line">        // 两个节点对应的结构不相同或者对应的值不想等都返回false</div><div class="line">        if (p == null || q == null || p.val != q.val) return false;</div><div class="line">        return isSameTree(p.left,q.left) &amp;&amp; isSameTree(p.right,q.right);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given two binary trees, write a function to check if they are equal or not.&lt;br&gt;Two binary trees are considered 
    
    </summary>
    
      <category term="leetcode" scheme="https://807fujiahao.github.io/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://807fujiahao.github.io/2017/07/17/hello-world/"/>
    <id>https://807fujiahao.github.io/2017/07/17/hello-world/</id>
    <published>2017-07-17T02:06:45.387Z</published>
    <updated>2017-07-17T02:06:45.388Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
