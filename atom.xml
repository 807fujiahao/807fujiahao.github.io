<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blog</title>
  <subtitle>我的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://807fujiahao.github.io/"/>
  <updated>2017-07-31T05:43:09.343Z</updated>
  <id>https://807fujiahao.github.io/</id>
  
  <author>
    <name>逍遥</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>cookie和session</title>
    <link href="https://807fujiahao.github.io/2017/07/31/cookie%E5%92%8Csession/"/>
    <id>https://807fujiahao.github.io/2017/07/31/cookie和session/</id>
    <published>2017-07-31T03:16:00.000Z</published>
    <updated>2017-07-31T05:43:09.343Z</updated>
    
    <content type="html"><![CDATA[<h4 id="为什么会有cookie？"><a href="#为什么会有cookie？" class="headerlink" title="为什么会有cookie？"></a>为什么会有cookie？</h4><p>我们都知道HTTP是一种无状态的协议，所以仅仅靠HTTP是无法得知这次请求访问的用户上次是否上次访问过还是第一次访问。从程序设计的的角度来说新的用户访问和上次已经访问过的用户访问数据效率差别挺大的。因为如果一个用户在很短的时间内频繁的访问同一个资源我们可以针对将这个资源做缓存，这样可以大大的提高效率。这个之后我们就用cookie来解决这个问题。</p>
<h4 id="理解cookie"><a href="#理解cookie" class="headerlink" title="理解cookie"></a>理解cookie</h4><p><strong>定义</strong></p>
<p>通俗的来说当用户第一次访问服务器的时候，服务器会给客户端浏览器返回一些key/value键值对来记录一些数据，通过给这些键值对加上一些限制条件。在符合条件时这个用户下一次再来访问服务器，数据又会被带回服务器，这样服务器就知道了这次访问的用户不是“新来”的用户。</p>
<p>这个有点像我们我们第一次去超市里面购物的时候办了一张购物卡，购物卡里面有自己的个人信息，当我们下次再去超市里面购物的时候我们直接就可以用购物卡去购物了。</p>
<p><strong>cookie的使用</strong></p>
<p>添加cookie</p>
<p>HttpServletReponse中有一个方法是addCookie利用这个方法我们就可以直接向客户端添加相应的cookie</p>
<p>获取cookie，下面是一段常用的获取cookie的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCookie</span><span class="params">(Cookie[] cookies,String name)</span></span>&#123;</div><div class="line">  <span class="keyword">if</span>(cookies != <span class="keyword">null</span>)&#123;</div><div class="line">    <span class="keyword">for</span>(Cookie cookie : cookies)&#123;</div><div class="line">      <span class="keyword">if</span>(name.equals(cookie.getName()))</div><div class="line">        retrun cookie.getValue();   </div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>cookie的使用场景</strong></p>
<ul>
<li>购物场景利用cookie来保存用户购物车里面添加的商品</li>
<li>用一些网站有记住密码的功能，利用cookie来保存用户的密码</li>
</ul>
<p><strong>cookie的安全问题</strong></p>
<p>cookie是通过HTTP头把服务器端用保存的数据从服务器端保存到客户端，所以再又从客户端传回到服务器端，所以数据都存在客户端浏览器里面。这带来一个很严重的问题，我们通过浏览器的一些插件就可以所以的添加，删除和修改cookie，如果把隐私数据保存在这里就会带来一个很严重的问题。这个时候是session就出现了。</p>
<h4 id="什么是session？"><a href="#什么是session？" class="headerlink" title="什么是session？"></a>什么是session？</h4><p>我们前面已经知道了cookie可以让服务器跟踪每个客户端的访问，但是每次客户端访问必须回传这些cookie，那么就会出现这样一个问题：如果回传的cookie很多就会很占用网络带宽。而session出现就很好的解决了这个问题。</p>
<p><strong>定义</strong></p>
<p>我们先来看看这样一个场景。我们想去银行存钱和取钱，第一次我们取银行的时候，银行会帮我们帮一张卡。一张卡对应着唯一的一个人，下次我们再去银行取钱的时候我们只要用这张卡去就行了。</p>
<p>客户端和服务端交互的时候只需要回传一个带有ID的cookie，这个ID是客户端第一次访问服务器的时候生产的，一个客户端对应着一个唯一的ID。当客户端有了这个ID之后，客户端只有回传这个ID就行了。在默认的情况下ID的NAME为JSESSIONID的一个cookie。、</p>
<p><strong>session的使用</strong></p>
<p>我们用过HttpServletRequest对象就可以拿到session对象。</p>
<p><strong>session的使用场景</strong></p>
<p>有些网站要求用户必须要登录之后才可以使用一些功能（比如csdn需要登录之后才可以写博客），当时有些用户可能直接在浏览器中输入地址来使用该功能，这显然是我们不能允许的。既然一个session可以识别一个唯一的用户，我们就可以利用session做权限的控制。</p>
<h4 id="cookie和session的缺点"><a href="#cookie和session的缺点" class="headerlink" title="cookie和session的缺点"></a>cookie和session的缺点</h4><p>对于cookie来说太多的cookie将会增加客户端和服务器交互的次数，同时cookie的安全性不如session那么好。但是对于一个大型的分布式的系统来说每个机器之间的session很难实现共享，而cookie因为数据都保存在客户端，所以两次请求到不同的服务器上去也是最新的值。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;为什么会有cookie？&quot;&gt;&lt;a href=&quot;#为什么会有cookie？&quot; class=&quot;headerlink&quot; title=&quot;为什么会有cookie？&quot;&gt;&lt;/a&gt;为什么会有cookie？&lt;/h4&gt;&lt;p&gt;我们都知道HTTP是一种无状态的协议，所以仅仅靠HTTP是无
    
    </summary>
    
      <category term="javaEE" scheme="https://807fujiahao.github.io/categories/javaEE/"/>
    
    
  </entry>
  
  <entry>
    <title>快速排序</title>
    <link href="https://807fujiahao.github.io/2017/07/28/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <id>https://807fujiahao.github.io/2017/07/28/快速排序/</id>
    <published>2017-07-28T05:45:00.000Z</published>
    <updated>2017-07-28T06:43:39.275Z</updated>
    
    <content type="html"><![CDATA[<p>快速排序主要采用分治的思想。假设对一个数组arr[l…r]进行排序排序，采用分治思想可以分为三分：</p>
<p>分解：选取一个主元，假设它的索引位置为q，将arr[l…r]以q为分割点分割为两个（可能为空）子数组arr[l…q-1]和arr[q+1…r],使得arr[l…q-1]这部分的元素都小于arr[q]，而arr[q+1…r]这部分的元素都大于arr[q],同时再划分的过程中也要计算出分割点q。</p>
<p>解决：通过递归调用快速排序，对子数组arr[l..q-1]和arr[q+1…r]进行快速排序。</p>
<p>合并：因为子数组都是原址排序，所以不需要合并，因为数组arr[l…r]已经有序。</p>
<p>下面是实现代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort1</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</div><div class="line">    quickSort1(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort1</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (start &lt; end)&#123;</div><div class="line">       </div><div class="line">        <span class="keyword">int</span> mid = partition(nums,start,end);</div><div class="line">        quickSort1(nums, start, mid - <span class="number">1</span>);</div><div class="line">        quickSort1(nums, mid + <span class="number">1</span>, end);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i = start-<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = start; j &lt; end; j++) &#123;</div><div class="line">        <span class="keyword">if</span> (nums[j] &lt; nums[end])&#123;</div><div class="line">            i++;</div><div class="line">            swap(nums,i,j);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    swap(nums,i+<span class="number">1</span>,end);</div><div class="line">    <span class="keyword">return</span> i+<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 交换元素</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> tmp = nums[i];</div><div class="line">    nums[i] = nums[j];</div><div class="line">    nums[j] = tmp;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>优化1</strong></p>
<p>我们知道快速排序在划分子数组的时候最理想的状况就是将划分出来的两个子数组的长度都相等。那我们就很容易想到遍历数组来找到一个主元使得划分的两个子数组的长度相等，但是遍历数组要消耗大量的时候，所以这样做并不会节省运行时间。那么我们能否找到一种简便的方案是我们不必要遍历数组呢？很容易想到加入我们取start，mid，end这三个位置的中间值作为主元。下面是实现代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 目标使得 nums[start] &lt; nums[end] &lt; nums[mid]</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">threeMedian</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> mid = (start+end) &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="comment">// 使得 nums[start] &lt; nums[mid]</span></div><div class="line">    <span class="keyword">if</span> (nums[start] &gt; nums[mid])</div><div class="line">        swap(nums,start,mid);</div><div class="line">    <span class="comment">// 使得 nums[start] &lt; nums[end]</span></div><div class="line">    <span class="keyword">if</span> (nums[start] &gt; nums[end])</div><div class="line">        swap(nums,start,end);</div><div class="line">    <span class="comment">// 使得 nums[end] &lt; nums[mid]</span></div><div class="line">    <span class="keyword">if</span> (nums[end] &gt; nums[mid])</div><div class="line">        swap(nums,mid,end);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort2</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (start &lt; end)&#123;</div><div class="line">            <span class="comment">// 三数取中</span></div><div class="line">            threeMedian(nums,start,end);</div><div class="line">            <span class="keyword">int</span> mid = partition(nums,start,end);</div><div class="line">            quickSort2(nums, start, mid - <span class="number">1</span>);</div><div class="line">            quickSort2(nums, mid + <span class="number">1</span>, end);</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>优化2</strong></p>
<p>为了避免划分数组出现最坏的情况（此情况出现在数组是有序数组，所以子数组划分就会出现一个子数组长度为0，另一个长度为end-start），此时快速排序的时间复杂度为O(n*n)，我们在长度小于一定长度的时候使用插入排序（快速排序数组完全有序的时候时间复杂度为O(n)）。下面是实现代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用插入排序</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> j;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start+<span class="number">1</span>; i &lt;= end; i++) &#123;</div><div class="line">        <span class="keyword">int</span> tmp = nums[i];</div><div class="line">        <span class="keyword">for</span> (j = i; j &gt; start &amp;&amp; tmp &lt; nums[j-<span class="number">1</span>]; j--)</div><div class="line">            nums[j] = nums[j-<span class="number">1</span>];</div><div class="line">        nums[j] = tmp;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort3</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">    <span class="comment">//当数组的长度小于10调用插入排序</span></div><div class="line">    <span class="keyword">if</span> (end - start + <span class="number">1</span> &lt; <span class="number">10</span>)&#123;</div><div class="line">        insertSort(nums,start,end);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (start &lt; end)&#123;</div><div class="line">        <span class="comment">// 三数取中</span></div><div class="line">        threeMedian(nums,start,end);</div><div class="line">        <span class="keyword">int</span> mid = partition(nums,start,end);</div><div class="line">        quickSort3(nums, start, mid - <span class="number">1</span>);</div><div class="line">        quickSort3(nums, mid + <span class="number">1</span>, end);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>单链表的快速排序</strong></p>
<p>首先我们来看一下partition的实现代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ListNode <span class="title">partition</span><span class="params">(ListNode start, ListNode end)</span> </span>&#123;</div><div class="line">    <span class="comment">// 防止划分的子链表为null</span></div><div class="line">	<span class="keyword">if</span> (start == <span class="keyword">null</span> || end == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">int</span> key = start.val;</div><div class="line">    ListNode p = start;</div><div class="line">    ListNode q = start.next;</div><div class="line">    <span class="keyword">while</span> (q != <span class="keyword">null</span>)&#123;</div><div class="line">        <span class="keyword">if</span> (q.val &lt; key)&#123;</div><div class="line">            p = p.next;</div><div class="line">            swap(p,q);</div><div class="line">        &#125;</div><div class="line">        q = q.next;</div><div class="line">    &#125;</div><div class="line">    swap(start,p);</div><div class="line">    <span class="keyword">return</span> p;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>和数组的快速排序的思路一样，利用主元节点将链表划分为两个部分。下面是实现代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSortList</span><span class="params">(ListNode head)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    ListNode tail = head;</div><div class="line">    <span class="keyword">while</span> (tail.next != <span class="keyword">null</span>)</div><div class="line">        tail = tail.next;</div><div class="line">    quickSortList(head,tail);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSortList</span><span class="params">(ListNode start, ListNode end)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (start != end)&#123;</div><div class="line">        ListNode q = partition(start,end);</div><div class="line">        <span class="keyword">if</span> (q == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        quickSortList(start,q);</div><div class="line">        quickSortList(q.next,end);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(ListNode p, ListNode q)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> tmp = p.val;</div><div class="line">    p.val = q.val;</div><div class="line">    q.val = tmp;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快速排序主要采用分治的思想。假设对一个数组arr[l…r]进行排序排序，采用分治思想可以分为三分：&lt;/p&gt;
&lt;p&gt;分解：选取一个主元，假设它的索引位置为q，将arr[l…r]以q为分割点分割为两个（可能为空）子数组arr[l…q-1]和arr[q+1…r],使得arr[l…
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://807fujiahao.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>冒泡排序</title>
    <link href="https://807fujiahao.github.io/2017/07/28/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <id>https://807fujiahao.github.io/2017/07/28/冒泡排序/</id>
    <published>2017-07-28T03:49:00.000Z</published>
    <updated>2017-07-28T05:34:32.936Z</updated>
    
    <content type="html"><![CDATA[<p>对于一个数组arr[0…n]我们可以把数组中的每一个元素都比作一个气泡，每个气泡都有不同的轻重（对应数组中的每一个元素的数值大小）。我们规定一个轻的气泡不能排在重的气泡上面，所以我们从下到上（对应0到n）扫描数组，将违背规则的气泡互换(重的气泡在轻的气泡下面)，这样重的气泡就实现了“上冒”。</p>
<p>下面是代码实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.length-<span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (nums[j-<span class="number">1</span>] &gt; nums[j])&#123;</div><div class="line">                <span class="keyword">int</span> tmp = nums[j-<span class="number">1</span>];</div><div class="line">                nums[j-<span class="number">1</span>] = nums[j];</div><div class="line">                nums[j] = tmp;</div><div class="line">            &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>优化1：</p>
<p>当我们扫描数组的时候发现气泡未发生上冒（也就是数据的交换），这说明了气泡顺序都符合了规则，那么我们就停止循环。</p>
<p>实现代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.length-<span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</div><div class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (nums[j-<span class="number">1</span>] &gt; nums[j])&#123;</div><div class="line">                <span class="keyword">int</span> tmp = nums[j-<span class="number">1</span>];</div><div class="line">                nums[j-<span class="number">1</span>] = nums[j];</div><div class="line">                nums[j] = tmp;</div><div class="line">                flag =<span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (flag)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>优化2：</p>
<p>我们假设数组arr[0..i]的数据已经是排好序的数据，上次扫描arr[i+1…n]区间最后发生交换的位置j，很显然arr[i+1…j]这个区间的数据也已经排好序，否则就会发生元素的交换，所以下次扫描使得时候可以由区间arr[i…n]缩减到arr[j…n]。</p>
<p>实现代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort3</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> lastSwapPos, swapTemp = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length-<span class="number">1</span>; i++) &#123;</div><div class="line">        lastSwapPos = swapTemp;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = nums.length-<span class="number">1</span>; j &gt; lastSwapPos; j--) &#123;</div><div class="line">            <span class="keyword">if</span> (nums[j-<span class="number">1</span>] &gt; nums[j])&#123;</div><div class="line">                <span class="keyword">int</span> tmp = nums[j-<span class="number">1</span>];</div><div class="line">                nums[j-<span class="number">1</span>] = nums[j];</div><div class="line">                nums[j] = tmp;</div><div class="line"></div><div class="line">                <span class="comment">// 记录最后一次发生交换的位置索引</span></div><div class="line">                swapTemp = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 证明没有元素发生交换，则说明数组已经有序</span></div><div class="line">        <span class="keyword">if</span> (lastSwapPos == swapTemp)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于一个数组arr[0…n]我们可以把数组中的每一个元素都比作一个气泡，每个气泡都有不同的轻重（对应数组中的每一个元素的数值大小）。我们规定一个轻的气泡不能排在重的气泡上面，所以我们从下到上（对应0到n）扫描数组，将违背规则的气泡互换(重的气泡在轻的气泡下面)，这样重的气泡
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://807fujiahao.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>插入排序</title>
    <link href="https://807fujiahao.github.io/2017/07/28/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <id>https://807fujiahao.github.io/2017/07/28/插入排序/</id>
    <published>2017-07-28T03:22:00.000Z</published>
    <updated>2017-07-28T03:46:04.761Z</updated>
    
    <content type="html"><![CDATA[<p>在介绍插入排序之前我们来看一下生活中的这样一个场景：</p>
<p>桌子上面有一堆背面朝上的扑克牌，我们用右手去从桌子上面抽取一张扑克牌放到左手上去。有一个这样的规定，左手上面的扑克牌必须按照某种顺序排列好（升序或者降序），于是当我们用右手从桌面上抽取一个扑克牌的时候，我们需要把抽取的牌插入到左手的正确位置（将牌放入左手之后，左手的牌必须满足某种排列顺序）。</p>
<h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><p>有了上面那个生活中的场景理解插入排序也比较的容易了。假设我们使用插入排序对数组进行升序排列。</p>
<p>插入排序的思想就是：将数组分为两个部分，左边的部分已经排序（对应左手的扑克牌），右边部分是待排序的（对应桌面上的扑克牌）。其实的时候左边的变为长度为1，也就是元素，然后通过一个循环对右边未排序的部分进行扫描。每当遇到一个数，就将它插入到左边排序部分的正确位置（对应将扑克牌插入到正确的位置）。循环结束，数组就排好序了。</p>
<p>实现代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T extends Comparable&lt;T&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">insertionSort</span><span class="params">(T[] nums)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> j;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</div><div class="line">        T tmp = nums[i];</div><div class="line">        <span class="comment">// 将比插入的数要大的数往前移动</span></div><div class="line">        <span class="keyword">for</span> (j = i; j &gt; <span class="number">0</span> &amp;&amp; tmp.compareTo(nums[j-<span class="number">1</span>]) &lt; <span class="number">0</span>;j--)</div><div class="line">            nums[j] = nums[j-<span class="number">1</span>];</div><div class="line">        <span class="comment">// 插入到数组中正确的位置</span></div><div class="line">        nums[j] = tmp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="单链表的插入排序"><a href="#单链表的插入排序" class="headerlink" title="单链表的插入排序"></a>单链表的插入排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">listInsertionSort</span><span class="params">(ListNode head)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> head;</div><div class="line">    ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">    dummy.next = head;</div><div class="line">    ListNode curr = head.next, pre = head;</div><div class="line">    <span class="keyword">while</span> (curr != <span class="keyword">null</span>)&#123;</div><div class="line">        ListNode x = dummy.next, y = dummy;</div><div class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">while</span> (x != curr)&#123;</div><div class="line">            <span class="keyword">if</span> (x.val &gt; curr.val)&#123;</div><div class="line">                pre.next = curr.next;</div><div class="line">                curr.next = x;</div><div class="line">                y.next = curr;</div><div class="line">                curr = pre.next;</div><div class="line">                flag = <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            y = x;</div><div class="line">            x = x.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (flag)&#123;</div><div class="line">            pre = curr;</div><div class="line">            curr = curr.next;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dummy.next;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当链表插入排序和数组不同的是，数组插入正确位置的时候是从后面往前面扫描，而单链表是从前面往后面扫描。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在介绍插入排序之前我们来看一下生活中的这样一个场景：&lt;/p&gt;
&lt;p&gt;桌子上面有一堆背面朝上的扑克牌，我们用右手去从桌子上面抽取一张扑克牌放到左手上去。有一个这样的规定，左手上面的扑克牌必须按照某种顺序排列好（升序或者降序），于是当我们用右手从桌面上抽取一个扑克牌的时候，我们
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://807fujiahao.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>二叉树路径问题</title>
    <link href="https://807fujiahao.github.io/2017/07/21/%E4%BA%8C%E5%8F%89%E6%A0%91%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/"/>
    <id>https://807fujiahao.github.io/2017/07/21/二叉树路径问题/</id>
    <published>2017-07-20T16:15:00.000Z</published>
    <updated>2017-07-21T04:10:36.444Z</updated>
    
    <content type="html"><![CDATA[<p>本篇博文将以leetcode上的二叉树路径问题来讲述二叉树路径相关的问题。</p>
<p>题目描述：</p>
<p>`Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.</p>
<p>For example:</p>
<p>Given the below binary tree and  sum = 22,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">      5</div><div class="line">     / \</div><div class="line">    4   8</div><div class="line">   /   / \</div><div class="line">  11  13  4</div><div class="line"> /  \      \</div><div class="line">7    2      1</div></pre></td></tr></table></figure>
<p>return true, as there exist a root-to-leaf path <code>5-&gt;4-&gt;11-&gt;2</code> which sum is 22.`</p>
<p>很容易想到的一种方法就是将一条从根节点都叶子节点的值相加起来然后与sum进行比较就可以确定是否含有，所有节点之后等于sum的路径。下面是实现代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPathSum</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">boolean</span> ans = getResult(root,<span class="number">0</span>,sum);</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">getResult</span><span class="params">(TreeNode node, <span class="keyword">int</span> pathSum,<span class="keyword">int</span> sum)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> res = pathSum+node.val;</div><div class="line">    <span class="keyword">if</span> (node.left == <span class="keyword">null</span> &amp;&amp; node.right == <span class="keyword">null</span>)&#123;</div><div class="line">        <span class="keyword">return</span> res == sum;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (node.left == <span class="keyword">null</span>) <span class="keyword">return</span> getResult(node.right,res,sum);</div><div class="line">    <span class="keyword">if</span> (node.right == <span class="keyword">null</span>) <span class="keyword">return</span> getResult(node.left,res,sum);</div><div class="line">    <span class="keyword">return</span> getResult(node.left,pathSum+node.val,sum) || getResult(node.right,res,sum);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的方法实现简单，容易理解。但是仔细想一下是否还有更加简单的实现呢？下面是leetcode上面看到的实现代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">betterSolution</span><span class="params">(TreeNode root,<span class="keyword">int</span> sum)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> root.val == sum;</div><div class="line">    <span class="keyword">return</span> betterSolution(root.left,sum-root.val) || betterSolution(root.right,sum-root.val);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它的思想是和刚刚的思想相反，我们在从根节点到叶子节点之前，我们用sum去减去每一个节点的值。最后到叶子节点的时候判断叶子节点的值和sum剩下的值是否相等，如果相等就返回true。</p>
<p>下面这个题目是上面的第二个版本：</p>
<p>`Given a binary tree and a sum, find all root-to-leaf paths where each path’s sum equals the given sum.</p>
<p>sum = 22</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">      5</div><div class="line">     / \</div><div class="line">    4   8</div><div class="line">   /   / \</div><div class="line">  11  13  4</div><div class="line"> /  \    / \</div><div class="line">7    2  5   1</div></pre></td></tr></table></figure>
<p>return</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">   [5,4,11,2],</div><div class="line">   [5,8,4,5]</div><div class="line">]</div><div class="line">`</div></pre></td></tr></table></figure>
<p>理解上面那道题之后实现这道题非常简单，下面是实现代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; pathSum(TreeNode root, <span class="keyword">int</span> sum) &#123;</div><div class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    List&lt;Integer&gt; curr = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    getResult(root,res,curr,sum);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getResult</span><span class="params">(TreeNode node, List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; curr, <span class="keyword">int</span> sum)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">    curr.add(node.val);</div><div class="line">    <span class="keyword">if</span> (node.left == <span class="keyword">null</span> &amp;&amp; node.right == <span class="keyword">null</span>)&#123;</div><div class="line">        <span class="keyword">if</span> (node.val == sum)</div><div class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(curr));</div><div class="line">    &#125;</div><div class="line">    getResult(node.left,res,curr,sum-node.val);</div><div class="line">    getResult(node.right,res,curr,sum-node.val);</div><div class="line">    curr.remove(curr.size()-<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇博文将以leetcode上的二叉树路径问题来讲述二叉树路径相关的问题。&lt;/p&gt;
&lt;p&gt;题目描述：&lt;/p&gt;
&lt;p&gt;`Given a binary tree and a sum, determine if the tree has a root-to-leaf path s
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>二叉树层序遍历</title>
    <link href="https://807fujiahao.github.io/2017/07/19/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <id>https://807fujiahao.github.io/2017/07/19/二叉树层序遍历/</id>
    <published>2017-07-19T12:27:00.000Z</published>
    <updated>2017-07-19T14:25:50.095Z</updated>
    
    <content type="html"><![CDATA[<p>本篇博客讲述的是关于二叉树层序遍历的一些问题。</p>
<p>首先我们来看一下如何实现二叉树的层序遍历。这需要借助一个队列来完成，它的思想其实就是图的广度优先搜索算法，当我们遍历到一个节点的时候我们总是先遍历这个节点临近的节点，然后在遍历远离它的节点。对应到二叉树的层序遍历上面也就是首先遍历这个节点的兄弟节点，等到兄弟节点遍历完成之后在遍历孩子节点（也就是下一层节点）。</p>
<p>首先我们需要定义一个二叉树的TreeNode类，它是二叉树的节点类，它的结构如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> val;</div><div class="line">    <span class="keyword">public</span> TreeNode left;</div><div class="line">    <span class="keyword">public</span> TreeNode right;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; val = x; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面是二叉树的层序遍历的代码实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">    LinkedList&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">    queue.offer(root);</div><div class="line">    <span class="keyword">while</span> (!queue.isEmpty())&#123;</div><div class="line">        TreeNode node = queue.poll();</div><div class="line">        System.out.print(node.val);</div><div class="line">        <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) queue.offer(node.left);</div><div class="line">        <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) queue.offer(node.right);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有时候我们不仅仅只想要将二叉树的层序遍历结果打印在一行，而是将二叉树层序遍历的结果一行一行的打印出来，这个问题和leetcode上面有一道题目相似，下面我们用leetcode上面的这道题来说明。</p>
<blockquote>
<p>Given a binary tree, return the level order traversal of its nodes’ values. (ie, from left to right, level by level).</p>
<p>For example:Given binary tree [3,9,20,null,null,15,7],     </p>
<p>​                        3    </p>
<p>​                       / \   </p>
<p>​                     9  20   </p>
<p>​                           /  \    </p>
<p>​                        15   7</p>
<p>return its level order traversal as:    [    [3],    [9,20],    [15,7]    ]</p>
</blockquote>
<p>对于这道题同样可以利用广度优先搜索算法来完成，下面就是它的实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//广度优先</span></div><div class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</div><div class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</div><div class="line">        LinkedList&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">        queue.offer(root);</div><div class="line">        <span class="keyword">while</span> (!queue.isEmpty())&#123;</div><div class="line">            <span class="keyword">int</span> levelNum = queue.size();    <span class="comment">//每一层的节点的数目</span></div><div class="line">            List&lt;Integer&gt; level = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">            <span class="comment">//广度优先搜索算法思想，首先将每一层的节点都遍历完之后才遍历下一层的节点</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; levelNum; i++) &#123;</div><div class="line">                TreeNode node = queue.poll();</div><div class="line">                System.out.print(node.val);</div><div class="line">                <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) queue.offer(node.left);</div><div class="line">                <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) queue.offer(node.right);</div><div class="line">                level.add(node.val);</div><div class="line">            &#125;</div><div class="line">            res.add(level);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>如果你仅仅以为这一道题只能实现广度优先搜索的思想来完成，那你就带错特错了！leetcode上的大神们提供了一种基于深度优先搜索的算法，下面是它的实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//基于深度优先搜索的实现</span></div><div class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root)&#123;</div><div class="line">	List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</div><div class="line">    dfsHelper(res,root,<span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//使用深度优先搜索的思想</span></div><div class="line"><span class="comment">//可以类比二叉树的先序遍历</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfsHelper</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, TreeNode node, <span class="keyword">int</span> level)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="comment">//第一次遍历到这一层的时候创建一个list</span></div><div class="line">    <span class="keyword">if</span> (level &gt;= res.size())</div><div class="line">        res.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</div><div class="line">    res.get(level).add(node.val);</div><div class="line">    dfsHelper(res,node.left,level+<span class="number">1</span>);</div><div class="line">    dfsHelper(res,node.right,level+<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相信到这里二叉树按层打印也就很容易实现了，有兴趣的人可以自行实现，我就不在这里赘述了。</p>
<p>下面是二叉树层序遍历的变种问题，都是来自leetcode上的。</p>
<p>题目描述：</p>
<blockquote>
<p>Given a binary tree, return the bottom-up level order traversal of its nodes’ values. (ie, from left to right, level by level from leaf to root).    For example:    Given binary tree [3,9,20,null,null,15,7],</p>
</blockquote>
<p>实现代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrderBottom(TreeNode root) &#123;</div><div class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</div><div class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">    queue.offer(root);</div><div class="line">    <span class="keyword">while</span> (!queue.isEmpty())&#123;</div><div class="line">        <span class="comment">// 当前这一层节点的个数</span></div><div class="line">        <span class="keyword">int</span> levelNum = queue.size();</div><div class="line">        List&lt;Integer&gt; curr = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; levelNum; i++) &#123;</div><div class="line">            TreeNode node = queue.poll();</div><div class="line">            <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) queue.offer(node.left);</div><div class="line">            <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) queue.offer(node.right);</div><div class="line">            curr.add(node.val);</div><div class="line">        &#125;</div><div class="line">        res.add(<span class="number">0</span>,curr);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其实很简单就是每次把一层的遍历的节点值集合curr添加到res的最前面就可以了。</p>
<p>题目描述：</p>
<blockquote>
<p>Given a non-empty binary tree, return the average value of the nodes on each level in the form of an array.</p>
<p>Example 1:</p>
<p>Input:   </p>
<p>​          3    </p>
<p>​          / \   </p>
<p>​        9  20      </p>
<p>​             /  \     </p>
<p>​           15   7</p>
<p>Output: [3, 14.5, 11]  </p>
<p>Explanation:The average value of nodes on level 0 is 3,  on level 1 is 14.5, and on level 2 is 11. Hence return [3, 14.5, 11].</p>
</blockquote>
<p>如果利用一般的广度优先搜索的思想，那么我们很容易就实现了我们只需要计算出每一层的值然后除以这一层的节点数即可。我下面介绍的是基于深度优先搜索思想的实现。下面是实现代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> List&lt;Double&gt; <span class="title">average</span><span class="params">(TreeNode root)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> levelNum = findLevel(root,<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">long</span>[] nodeCount = <span class="keyword">new</span> <span class="keyword">long</span>[levelNum];  <span class="comment">//每层的节点数</span></div><div class="line">    <span class="keyword">long</span>[] values = <span class="keyword">new</span> <span class="keyword">long</span>[levelNum];     <span class="comment">//每一层节点相加的值</span></div><div class="line">    traversal(root, nodeCount, values, <span class="number">0</span>);</div><div class="line">    List&lt;Double&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nodeCount.length; i++) &#123;</div><div class="line">        res.add((<span class="keyword">double</span>) values[i]/ (<span class="keyword">double</span>) nodeCount[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//使用深度优先搜索算法</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">traversal</span><span class="params">(TreeNode node, <span class="keyword">long</span>[] nodeCount, <span class="keyword">long</span>[] values, <span class="keyword">int</span> level)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">    nodeCount[level]++;</div><div class="line">    values[level] += node.val;</div><div class="line"></div><div class="line">    traversal(node.left, nodeCount, values, level + <span class="number">1</span>);</div><div class="line">    traversal(node.right, nodeCount, values, level + <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">findLevel</span><span class="params">(TreeNode root, <span class="keyword">int</span> level)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> level;</div><div class="line">    <span class="keyword">return</span> Math.max(findLevel(root.left,level+<span class="number">1</span>),findLevel(root.right,level+<span class="number">1</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>它的思想很简单我们知道平均数=总数/个数，那么我们就创建两个long类型数组nodeCount记录每一层的节点数，values记录这一层节点值的总和，但是我们首先需要知道二叉树的层数。这里我们使用一个findLevel的负罪方法来实现，然后通过深度优先搜索算法的辅助方法traversal来实现。</p>
<p>下面来看一个层序遍历的变种问题。</p>
<blockquote>
<p>given a binary tree, return the zigzag level order traversal of its nodes’ values. (ie, from left to right, then right to left for the next level and alternate between).</p>
<p>For example:Given binary tree [3,9,20,null,null,15,7],         </p>
<pre><code> 3       
 / \      
9   20        
    /  \         
    15   7
</code></pre><p>return its zigzag level order traversal as:        [        [3],        [20,9],        [15,7]        ]</p>
</blockquote>
<p>同样广度优先搜索通过介绍上面的例子之后不难实现，有兴趣的人可以自行实现。在这里我同样介绍是基于深度优先搜索的，下面是实现代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; zigzagOrder(TreeNode root)&#123;  </div><div class="line">	List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</div><div class="line">    dfsHelper(res,root,<span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfsHelper</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, TreeNode node, <span class="keyword">int</span> level)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="comment">//刚开始遍历到这一层的时候</span></div><div class="line">    <span class="keyword">if</span> (level == res.size())</div><div class="line">        res.add(<span class="keyword">new</span> LinkedList&lt;&gt;());</div><div class="line"></div><div class="line">    <span class="comment">//层数是偶数的时候按照从左到右</span></div><div class="line">    <span class="keyword">if</span> ((level &amp; <span class="number">1</span>) == <span class="number">0</span>)</div><div class="line">        res.get(level).add(node.val);</div><div class="line">    <span class="keyword">else</span>	<span class="comment">//层数是偶数的时候从右到左的顺序</span></div><div class="line">        res.get(level).add(<span class="number">0</span>,node.val);</div><div class="line">    dfsHelper(res,node.left,level+<span class="number">1</span>);</div><div class="line">    dfsHelper(res,node.right,level+<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇博客讲述的是关于二叉树层序遍历的一些问题。&lt;/p&gt;
&lt;p&gt;首先我们来看一下如何实现二叉树的层序遍历。这需要借助一个队列来完成，它的思想其实就是图的广度优先搜索算法，当我们遍历到一个节点的时候我们总是先遍历这个节点临近的节点，然后在遍历远离它的节点。对应到二叉树的层序遍历
    
    </summary>
    
      <category term="leetcode" scheme="https://807fujiahao.github.io/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Same Tree</title>
    <link href="https://807fujiahao.github.io/2017/07/17/%E6%AC%A2%E5%92%8C%E4%BD%A0%E6%90%9E%E5%9F%BA%E5%90%97%E5%B0%8F%E9%B8%A1%E9%B8%A1/"/>
    <id>https://807fujiahao.github.io/2017/07/17/欢和你搞基吗小鸡鸡/</id>
    <published>2017-07-17T14:06:00.000Z</published>
    <updated>2017-07-17T15:09:10.054Z</updated>
    
    <content type="html"><![CDATA[<p>题目描述：</p>
<blockquote>
<p>Given two binary trees, write a function to check if they are equal or not.<br>Two binary trees are considered equal if they are structurally identical and the nodes have the same value.</p>
</blockquote>
<p>解题思路：和二叉树先序遍历的思想一致，首先对于两棵树上的节点来说，先判断他们当前对应的节点的值是否相等，然后在去一直向下判断左子树节点是否一致，左子树判断无误之后，判断右子树对应的节点的值是否一致。</p>
<p>下面是java的代码实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class SameTree &#123;</div><div class="line"></div><div class="line">    public boolean isSameTree(TreeNode p, TreeNode q) &#123;</div><div class="line">        if (p == null &amp;&amp; q == null) return true;</div><div class="line">        // 两个节点对应的结构不相同或者对应的值不想等都返回false</div><div class="line">        if (p == null || q == null || p.val != q.val) return false;</div><div class="line">        return isSameTree(p.left,q.left) &amp;&amp; isSameTree(p.right,q.right);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given two binary trees, write a function to check if they are equal or not.&lt;br&gt;Two binary trees are considered 
    
    </summary>
    
      <category term="leetcode" scheme="https://807fujiahao.github.io/categories/leetcode/"/>
    
    
  </entry>
  
</feed>
